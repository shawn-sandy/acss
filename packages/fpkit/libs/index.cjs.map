{"version":3,"sources":["../src/components/buttons/button.tsx","../src/components/cards/card.tsx","../src/components/modal/dialog.tsx","../src/components/form/fields.tsx","../src/components/layout/landmarks.tsx","../src/components/images/img.tsx","../src/components/form/inputs.tsx","../src/components/fp.tsx","../src/components/link/link.tsx","../src/components/list/list.tsx","../src/components/modal/modal.tsx","../src/components/nav/nav.tsx","../src/components/popover/popover.tsx","../src/components/tables/table-elements.tsx","../src/components/tables/table.tsx","../src/components/tag/tag.tsx","../src/components/details/details.tsx","../src/components/text/text.tsx","../src/components/form/textarea.tsx","../src/components/heading/heading.tsx","../src/components/breadcrumbs/breadcrumb.tsx","../src/libs/content.ts","../src/components/text-to-speech/TextToSpeech.tsx","../src/components/text-to-speech/useTextToSpeech.tsx","../src/components/text-to-speech/views/TextToSpeechControls.tsx"],"names":["React","Button","type","children","styles","disabled","classes","onPointerDown","onPointerOver","onPointerLeave","props","handlePointerDown","e","ui_default","Title","className","as","Content","Footer","Card","elm","id","Dialog","modalRef","openOnMount","Field","label","labelFor","Landmarks","Header","headerBackground","Main","Aside","Section","Article","Img","src","alt","width","height","loading","placeholder","fetchpriority","decoding","imgLoaded","imgError","FP","defaultStyles","ref","Component","styleObj","fp_default","Input","name","value","isDisabled","readonly","required","onChange","onBlur","handleChange","handleBlur","handleKeyDown","Link","href","target","rel","prefetch","btnStyle","relValue","link_default","ListItem","List","variant","role","list_default","Modal","openChild","closeChild","modalHeader","modalFooter","showOpen","dialogRef","openModal","closeModal","NavList","isBlock","NavItem","Nav","Popover","popoverTrigger","hoverRef","popOverRef","isVisible","popoverPosition","handlePointerEvent","handlePointerLeave","use_popover_default","popoverStyles","Caption","Thead","Tbody","Tr","Td","Table","dataStyle","RenderHead","data","head","item","index","RenderBody","rec","RenderTable","tblBody","tblCaption","tblHead","Tag","Details","summary","icon","ariaLabel","open","onToggle","onPointerDownCallback","Text","text","Textarea","rows","cols","readOnly","textarea_default","Heading","ui","Truncate","str","length","Items","Breadcrumb","startRoute","currentRoute","spacer","routes","ariaLabelPrefix","truncateLength","currentPath","setCurrentPath","path","getPathName","pathSegment","route","segments","segment","lastSegment","uuid","currentSegment","url","useState","useEffect","useTextToSpeech","initialVoice","availableVoices","setAvailableVoices","currentVoice","setCurrentVoice","isSpeaking","setIsSpeaking","isPaused","setIsPaused","utterance","setUtterance","updateVoices","voices","googleVoice","voice","englishVoice","options","onEnd","TTSButtonComponent","onClick","TTSButton","TextToSpeechControls","onSpeak","onPause","onResume","onCancel","icon_default","TextToSpeechControls_default","TextToSpeech","initialText","showTextInput","pitch","rate","language","speak","pause","resume","cancel","getAvailableLanguages","setText","handleSpeak","handleEnd"],"mappings":"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","sourcesContent":["import UI from '../ui'\nimport React from 'react'\n\nexport type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> &\n  Partial<React.ComponentProps<typeof UI>> & {\n    /**\n     * The button type\n     * Required - 'button' | 'submit' | 'reset'\n     */\n    type: 'button' | 'submit' | 'reset'\n  }\n\nexport const Button = ({\n  type = 'button',\n  children,\n  styles,\n  disabled,\n  classes,\n  onPointerDown,\n  onPointerOver,\n  onPointerLeave,\n\n  ...props\n}: ButtonProps) => {\n  const handlePointerDown = (e: React.PointerEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onPointerDown?.(e)\n    }\n  }\n\n  const handlePointerOver = (e: React.PointerEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onPointerOver?.(e)\n    }\n  }\n\n  const handlePointerLeave = (e: React.PointerEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onPointerLeave?.(e)\n    }\n  }\n\n  /* Returning a button element. */\n  return (\n    <UI\n      as=\"button\"\n      type={type}\n      onPointerOver={handlePointerOver}\n      onPointerDown={handlePointerDown}\n      onPointerLeave={handlePointerLeave}\n      style={styles}\n      className={classes}\n      aria-disabled={disabled}\n      onClick={handlePointerDown}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n  //\n}\n\nexport default Button\nButton.displayName = 'Button'\n","import React from 'react'\nimport UI from '#components/ui'\n\n/*\n * CardProps interface\n *\n * Extends ComponentProps. Defines props for the Card component.\n *\n * @property {('div' | 'aside' | 'section' | 'article')} [elm='div'] - HTML element to render as\n */\nexport type CardProps = {\n  elm?: 'div' | 'aside' | 'section' | 'article'\n  title?: React.ReactNode\n  footer?: React.ReactNode\n} & React.ComponentProps<typeof UI>\n\n/*\n * Title component\n *\n * Renders a title for the Card component using the UI component.\n *\n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Title content\n * @param {string} [props.className] - Additional CSS classes\n * @param {Object} [props.styles] - Inline styles\n *\n * @returns {ReactElement} Title component\n */\nexport const Title = ({\n  children,\n  className,\n  styles,\n  as = 'h3',\n  ...props\n}: React.PropsWithChildren<{\n  className?: string\n  styles?: React.CSSProperties\n  as?: React.ElementType\n}>) => {\n  return (\n    <UI\n      as={as}\n      className={`card-title ${className || ''}`}\n      styles={styles}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nTitle.displayName = 'Title'\n\n/*\n * CardContent component\n *\n * Renders the content of the Card component using the UI component with an article element.\n *\n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Content\n * @param {string} [props.className] - Additional CSS classes\n * @param {Object} [props.styles] - Inline styles\n *\n * @returns {ReactElement} CardContent component\n */\nexport const Content = ({\n  children,\n  className,\n  styles,\n  ...props\n}: React.PropsWithChildren<{\n  className?: string\n  styles?: React.CSSProperties\n}>) => {\n  return (\n    <UI\n      as=\"article\"\n      className={`card-content ${className || ''}`}\n      styles={styles}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nContent.displayName = 'Content'\n\n/*\n * Footer component\n *\n * Renders a footer section for the Card component using the UI component.\n *\n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Footer content\n * @param {string} [props.className] - Additional CSS classes\n * @param {Object} [props.styles] - Inline styles\n *\n * @returns {ReactElement} Footer component\n */\nexport const Footer = ({\n  children,\n  className,\n  styles,\n  ...props\n}: React.PropsWithChildren<{\n  className?: string\n  styles?: React.CSSProperties\n}>) => {\n  return (\n    <UI\n      as=\"div\"\n      className={`card-footer ${className || ''}`}\n      styles={styles}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nFooter.displayName = 'Footer'\n\n/*\n * Card component\n *\n * Renders a card container.\n *\n * @param {CardProps} props - Component props\n * @param {('div' | 'aside' | 'section' | 'article')} [props.elm='div'] - Element to render as\n * @param {Object} [props.styles] - CSS styles to apply\n * @param {ReactNode} props.children - Card content\n * @param {boolean} [props.renderStyles=true] - Whether to render default styles\n * @param {string} [props.dataStyle] - data-card attribute value\n * @param {string} [props.id] - Unique ID\n *\n * @returns {ReactElement} Card component\n */\nexport const Card = ({\n  elm = 'div',\n  styles,\n  children,\n  classes = 'shadow',\n  id,\n  ...props\n}: CardProps) => {\n  return (\n    <UI\n      as={elm}\n      id={id}\n      styles={styles}\n      className={classes}\n      data-card\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nexport default Card\nCard.displayName = 'Card'\nCard.Title = Title\nCard.Content = Content\nCard.Footer = Footer\n","import UI from '../ui'\nimport React from 'react'\n\nexport type DialogProps = {\n  /**\n   * React ref for dialog element\n   */\n  modalRef: React.RefObject<HTMLDialogElement>\n  /**\n   * Handle close modal event\n   */\n  closeModal?: (e: React.SyntheticEvent<HTMLDialogElement>) => void\n  /**\n   * open modal on mount\n   */\n  openOnMount?: boolean\n} & React.ComponentProps<typeof UI>\n/**\n * Dialog component\n */\nexport const Dialog = ({\n  id,\n  children,\n  classes,\n  modalRef,\n  openOnMount,\n  ...props\n}: DialogProps) => {\n  const handleCloseModal = (e: React.SyntheticEvent<HTMLDialogElement>) => {\n    if (e.currentTarget === e.target) {\n      e.currentTarget.close()\n    }\n  }\n\n  return (\n    <UI\n      as=\"dialog\"\n      id={id}\n      classes={classes}\n      ref={modalRef}\n      open={openOnMount}\n      onClick={handleCloseModal}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nDialog.displayName = 'Dialog'\n","import React from 'react'\nimport UI from '../ui'\n\nexport type FieldProps = {\n  /**\n   * The label content\n   */\n  label: React.ReactNode\n  children: React.ReactNode\n} & React.ComponentProps<'label'> &\n  Partial<React.ComponentProps<typeof UI>>\n/**\n * Field component that renders a label and children wrapped in a div element.\n * @param labelFor Defines the for attribute of the label element\n * @param styles Custom styles to be applied to the component\n * @param label The label content\n * @param children The children to be rendered inside the component\n * @param props Additional props to be spread to the component\n */\nexport const Field = ({\n  label,\n  labelFor,\n  id,\n  styles,\n  classes,\n  children,\n  ...props\n}: FieldProps) => {\n  return (\n    <UI\n      as=\"div\"\n      id={id}\n      styles={styles}\n      className={classes}\n      data-style=\"fields\"\n      {...props}\n    >\n      <label htmlFor={labelFor}>{label}</label>\n      {children}\n    </UI>\n  )\n}\n\nexport default Field\nField.displayName = 'Field'\n","import UI from '../ui'\nimport React, { ReactNode } from 'react'\n\ntype ComponentProps = React.ComponentProps<typeof UI>\n\n/**\n * Renders children elements without any wrapping component.\n * Can be used as a placeholder when no semantic landmark is needed.\n */\nexport const Landmarks = (children?: React.FC) => <>{children}</>\n\ntype HeaderProps = {\n  headerBackground?: ReactNode\n} & ComponentProps\n/**\n * Header component.\n *\n * Renders a header landmark with a section child.\n *\n * @param children - The content to render inside the header.\n * @param styles - Optional styles object.\n * @param props - Other props.\n */\nexport const Header = ({\n  id,\n  children,\n  headerBackground,\n  styles,\n  classes,\n  ...props\n}: HeaderProps) => {\n  return (\n    <UI as=\"header\" id={id} styles={styles} className={classes} {...props}>\n      {headerBackground}\n      <UI as=\"section\">{children}</UI>\n    </UI>\n  )\n}\n\n/**\n * Main component.\n *\n * Renders a main landmark.\n *\n * @param children - The content to render inside the main element.\n * @param styles - Optional styles object.\n * @param props - Other props.\n */\nexport const Main = ({\n  id,\n  children,\n  styles,\n  classes,\n  ...props\n}: ComponentProps) => {\n  return (\n    <UI as=\"main\" id={id} styles={styles} {...props} className={classes}>\n      {children}\n    </UI>\n  )\n}\n\n/**\n * Footer component that renders a footer element with a section element inside.\n * @param {ReactNode} children - Child elements to render inside the section element.\n * @param styles - CSS styles to apply to the footer element.\n * @param props - Additional props to pass to the footer element.\n * @returns A React component that renders a footer element with a section element inside.\n */\nexport const Footer = ({\n  id,\n  classes,\n  children,\n  styles = {},\n  ...props\n}: ComponentProps) => {\n  return (\n    <UI as=\"footer\" id={id} className={classes} styles={styles} {...props}>\n      <UI as=\"section\">{children || 'Copyright © 2022'}</UI>\n    </UI>\n  )\n}\n\nexport const Aside = ({\n  id,\n  children,\n  styles = {},\n  classes,\n  ...props\n}: ComponentProps) => {\n  return (\n    <UI as=\"aside\" id={id} styles={styles} className={classes} {...props}>\n      <UI as=\"section\">{children}</UI>\n    </UI>\n  )\n}\n\n/**\n * Section component that renders a section element.\n *\n * @param children - Child elements to render inside the section.\n * @param styles - CSS styles to apply to the section.\n * @param props - Other props.\n */\nexport const Section = ({\n  id,\n  children,\n  styles,\n  classes,\n  ...props\n}: ComponentProps) => {\n  return (\n    <UI as=\"section\" id={id} styles={styles} className={classes} {...props}>\n      {children}\n    </UI>\n  )\n}\n\n/**\n * Article component renders an HTML <article> element.\n *\n * @param children - Child elements to render inside the article.\n * @param styles - CSS styles to apply to the article.\n * @param props - Additional props to pass to the article element.\n */\nexport const Article = ({\n  id,\n  children,\n\n  styles,\n  classes,\n  ...props\n}: ComponentProps) => {\n  return (\n    <UI as=\"article\" id={id} styles={styles} className={classes} {...props}>\n      {children}\n    </UI>\n  )\n}\n\nexport default Landmarks\n\nLandmarks.displayName = 'Landmarks'\nLandmarks.Header = Header\nLandmarks.Main = Main\nLandmarks.Footer = Footer\nLandmarks.Aside = Aside\nLandmarks.Section = Section\nLandmarks.Article = Article\n","import UI from '../ui'\nimport React from 'react'\n/*\n * ImageProps interface\n *\n * Extends ComponentProps and defines additional props for the Img component.\n *\n * @property {string} [src] - The image source URL\n * @property {string} alt - Required alt text for image accessibility\n * @property {number} width - Required width of image\n * @property {number} [height] - Optional height of image\n * @property {\"eager\" | \"lazy\"} [loading=\"lazy\"] - Loading behavior\n * @property {string} [placeholder] - Fallback placeholder image\n * @property {\"high\" | \"low\"} [fetchpriority=\"low\"] - Image fetch priority\n * @property {\"sync\" | \"async\" | \"auto\"} [decoding=\"auto\"] - Decode setting\n * @property {function} [imgError] - Error callback\n * @property {function} [imgLoaded] - Loaded callback\n */\nexport type ImageProps = React.ComponentProps<'img'> &\n  React.ComponentProps<typeof UI>\n\n/*\n * Img component\n *\n * Renders an <img> element with custom props.\n *\n * @param {string} src - The image source URL.\n * @param {string} alt - The alt text for the image.\n * @param {number} [width=480] - The width of the image.\n * @param {number} [height] - The height of the image.\n * @param {Object} [styles] - Additional CSS styles to apply.\n * @param {boolean} [renderStyles=true] - Whether to render the default styles.\n * @param {\"eager\" | \"lazy\"} [loading=\"lazy\"] - The loading attribute.\n * @param {string} [placeholder] - A placeholder image URL.\n * @param {\"high\" | \"low\"} [fetchpriority=\"low\"] - The fetchpriority attribute.\n * @param {\"sync\" | \"async\" | \"auto\"} [decoding=\"auto\"] - The decoding attribute.\n * @param {function} [imgLoaded] - Callback when image loads successfully.\n * @param {function} [imgError] - Callback when image errors.\n *\n * @returns {JSX.Element} The Img component.\n */\nexport const Img = ({\n  src = '//',\n  alt,\n  width = 480,\n  height,\n  styles,\n  loading = 'lazy',\n  placeholder = `https://via.placeholder.com/${width}?text=PLACEHOLDER`,\n  fetchpriority = 'low',\n  decoding = 'auto',\n  imgLoaded,\n  imgError,\n  ...props\n}: ImageProps) => {\n  const handleImgError = (\n    e: React.SyntheticEvent<HTMLImageElement, Event>,\n  ): void => {\n    if (imgError) {\n      imgError?.(e)\n      return\n    }\n    if (e.currentTarget.src !== placeholder) {\n      e.currentTarget.src = placeholder\n    }\n  }\n\n  const handleImgLoad = (\n    e: React.SyntheticEvent<HTMLImageElement, Event>,\n  ): void => {\n    imgLoaded?.(e)\n  }\n\n  return (\n    <UI\n      as=\"img\"\n      src={src}\n      alt={alt}\n      width={width}\n      height={height || 'auto'}\n      loading={loading}\n      style={styles}\n      onError={handleImgError}\n      onLoad={handleImgLoad}\n      fetchPriority={fetchpriority}\n      decoding={decoding}\n      {...props}\n    />\n  )\n}\n\nexport default Img\nImg.displayName = 'Img'\n","import React from 'react'\nimport FP from '../fp'\n\nexport type InputProps = {\n  /**\n   * The type of the input.\n   */\n  type?: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url' | 'search'\n\n  /**\n   * Set the element as disabled\n   */\n  isDisabled?: boolean\n} & React.ComponentProps<typeof FP>\n\n/**\n * Input component that renders an HTML input element.\n * @param {InputProps} props - The input component props.\n * @returns {JSX.Element} - The input component.\n */\nexport const Input = ({\n  type = 'text',\n  name,\n  value,\n  placeholder,\n  id,\n  styles,\n  classes,\n  isDisabled,\n  disabled,\n  readonly,\n  required,\n  ref,\n  onChange,\n  onBlur,\n  onPointerDown,\n  ...props\n}: InputProps): JSX.Element => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange && !disabled) {\n      onChange?.(e)\n    }\n  }\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (onBlur && !disabled) {\n      onBlur?.(e)\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (onPointerDown && !disabled) {\n      e.preventDefault()\n      onPointerDown?.(e)\n    }\n  }\n\n  return (\n    <FP\n      as=\"input\"\n      id={id}\n      type={type}\n      placeholder={placeholder || `${required ? '*' : ''} ${type} input `}\n      className={classes}\n      styles={styles}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      value={value}\n      name={name}\n      ref={ref}\n      aria-disabled={isDisabled}\n      tabIndex={isDisabled ? -1 : undefined}\n      aria-readonly={readonly}\n      aria-required={required}\n      required={required}\n      readOnly={readonly}\n      {...props}\n    />\n  )\n}\n\nInput.displayName = 'Input'\nexport default Input\n","import React from 'react'\nimport { ComponentProps } from '../types'\n\ntype PolymorphicRef<C extends React.ElementType> =\n  React.ComponentPropsWithRef<C>['ref']\n\ntype AsProp<C extends React.ElementType> = {\n  as?: C\n}\n\ntype PropsToOmit<C extends React.ElementType, P> = keyof (AsProp<C> & P)\n\ntype PolymorphicComponentProp<\n  C extends React.ElementType,\n  Props = {},\n> = React.PropsWithChildren<Props & AsProp<C>> &\n  Omit<React.ComponentPropsWithoutRef<C>, PropsToOmit<C, Props>>\n\ntype PolymorphicComponentPropWithRef<\n  C extends React.ElementType,\n  Props = {},\n> = PolymorphicComponentProp<C, Props> & {\n  ref?: PolymorphicRef<C>\n}\n\ntype FPProps<C extends React.ElementType> = PolymorphicComponentPropWithRef<\n  C,\n  {\n    renderStyles?: boolean\n    styles?: React.CSSProperties\n    classes?: string\n  }\n>\n\n/*\n * FPComponent type definition\n *\n * Defines the component function signature for the FP component.\n *\n * @typeParam C - The HTML element type to render\n * @param props - The component props\n * @returns React component\n */\ntype FPComponent = <C extends React.ElementType = 'span'>(\n  props: FPProps<C>,\n) => React.ReactElement | any\n\n/**\n * FP component is a polymorphic component that renders an HTML element with optional styles.\n * @param {Object} props - Component props\n * @param {React.ElementType} props.as - The HTML element to render. Defaults to 'div'.\n * @param {boolean} props.renderStyles - Whether to render styles or not. Defaults to true.\n * @param {Object} props.styles - The styles to apply to the component.\n * @param {Object} props.defaultStyles - The default styles to apply to the component.\n * @param {React.ReactNode} props.children - The children to render inside the component.\n * @returns {React.ReactElement} - A React component that renders an HTML element with optional styles.\n */\nconst FP: FPComponent = React.forwardRef(\n  <C extends React.ElementType>(\n    { as, styles, classes, children, defaultStyles, ...props }: FPProps<C>,\n    ref?: PolymorphicRef<C>,\n  ) => {\n    const Component = as || 'div'\n\n    const styleObj = { ...defaultStyles, ...styles } as React.CSSProperties\n\n    return (\n      <Component ref={ref} style={styleObj} className={classes} {...props}>\n        {children}\n      </Component>\n    )\n  },\n)\nexport interface BoxProps extends ComponentProps {\n  renderStyles: true\n}\n\nexport default FP\n","import UI from '../ui'\nimport React from 'react'\n\nexport type LinkProps = {\n  /** Applies button styling to the link */\n  btnStyle?: boolean\n} & React.ComponentProps<typeof UI> &\n  React.ComponentProps<'a'>\n\nexport const Link = ({\n  href,\n  target,\n  rel,\n  children,\n  styles,\n  prefetch,\n  btnStyle,\n  onPointerDown,\n  ...props\n}: LinkProps) => {\n  let relValue = rel\n\n  if (target === '_blank')\n    relValue = `noopener noreferrer ${prefetch ? 'prefetch' : ''}`\n\n  const handleOnpointerDown = (e: React.PointerEvent<HTMLAnchorElement>) => {\n    if (onPointerDown) onPointerDown?.(e)\n  }\n\n  return (\n    <UI\n      as=\"a\"\n      href={href}\n      target={target}\n      styles={styles}\n      rel={relValue}\n      onPointerDown={handleOnpointerDown}\n      data-btn={btnStyle}\n      prefetch={prefetch}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nexport default Link\nLink.displayName = 'Link'\n","import * as React from 'react'\nimport UI from '../ui'\n\ntype ListProps = {\n  /** Type of list to render (default: 'ul') */\n  type?: 'ul' | 'ol' | 'dl'\n  /** variant of list to render (default: 'none') */\n  variant?: string\n} & React.ComponentProps<typeof UI>\n\nexport type ListItemProps = {\n  /** Type of list item to render (default: 'li') */\n  type?: 'li' | 'dt' | 'dd'\n} & React.ComponentProps<typeof UI>\n\n/**\n * ListItem component\n * @param type - HTML tag type for the list item (default: 'li')\n * @param styles - CSS styles object\n * @param children - Child elements to be rendered inside the list item\n * @param props - Additional props to be passed to the underlying HTML element\n * @returns A React component that renders a list item\n */\nexport const ListItem = ({\n  type = 'li',\n  id,\n  styles,\n  children,\n  classes,\n  ...props\n}: ListItemProps) => {\n  return (\n    <UI id={id} as={type} className={classes} {...props} style={styles}>\n      {children}\n    </UI>\n  )\n}\n\n/**\n * List component renders a list element with provided props\n * @param children - Child elements to render inside the list\n * @param classes - CSS classes to apply\n * @param type - Type of list element (default: 'ul')\n * @param variant - Variant for styling purposes\n * @param styles - Inline styles object\n * @param role - ARIA role\n * @param props - Additional props to pass to underlying element\n */\nexport const List = ({\n  children,\n  classes,\n  type = 'ul',\n  variant,\n  styles,\n  role,\n  ...props\n}: ListProps) => {\n  return (\n    <UI\n      as={type}\n      data-variant={variant}\n      className={classes}\n      style={styles}\n      role={role}\n      {...props}\n    >\n      {children}\n    </UI>\n  )\n}\n\nexport default List\nList.displayName = 'List'\nList.ListItem = ListItem\n","import React from 'react'\nimport { ComponentProps } from '../../types'\nimport { Button } from '../buttons/button'\nimport { Dialog } from './dialog'\n\nexport interface ModalProps extends ComponentProps {\n  /**\n   * The child component/content for open button\n   */\n  openChild?: React.ReactNode\n  /**\n   * The child component/content for close button\n   */\n  closeChild?: React.ReactNode\n  /**\n   * The child component/content for modal header\n   */\n  modalHeader?: React.ReactNode\n  /**\n   * The child component/content for modal footer\n   */\n  modalFooter?: React.ReactNode\n  /**\n   * The child component/content for modal body\n   */\n  children: React.ReactNode\n  /**\n   * Open modal on mount when set to true\n   */\n  showOpen?: boolean\n}\nexport const Modal = ({\n  openChild,\n  closeChild,\n  modalHeader,\n  modalFooter,\n  children,\n  showOpen = false,\n  ...props\n}: ModalProps) => {\n  const dialogRef = React.useRef<HTMLDialogElement>(null)\n  const openModal = (): void => {\n    if (dialogRef.current) {\n      if(showOpen)\n      dialogRef.current.show()\n      else\n      dialogRef.current.showModal()\n    }\n  }\n  const closeModal = () => {\n    if (dialogRef.current) {\n      dialogRef.current.close()\n    }\n  }\n\n  return (\n    <>\n      <Dialog modalRef={dialogRef} openOnMount={showOpen} {...props}>\n        <section>\n          {modalHeader}\n          {children}\n          {modalFooter ?? (\n            <div>\n              <Button\n                type=\"button\"\n                pointerDown={() => {\n                  closeModal()\n                }}\n              >\n                {closeChild || 'Close'}\n              </Button>{' '}\n            </div>\n          )}\n        </section>\n      </Dialog>\n      { !showOpen && (\n      <Button type=\"button\" pointerDown={openModal}>\n        {openChild || 'Open Modal'}\n      </Button>\n      )}\n    </>\n  )\n}\n\nModal.displayName = 'Modal'\n","import UI from '../ui'\nimport List from '../list/list'\nimport React from 'react'\n\nexport type NavListProps = React.ComponentProps<typeof List> & {\n  isBlock?: boolean\n}\nexport type NavItemProps = React.ComponentProps<typeof List.ListItem>\n\nexport type NavProps = React.ComponentProps<typeof UI>\n\n/**\n * Renders a NavList component.\n * @param {Object} props - The props for the component.\n * @param {ReactNode} props.children - The child elements.\n * @param {Object} props - Additional props to spread to the List component.\n * @returns {JSX.Element} The rendered NavList component.\n */\nexport const NavList = ({ isBlock, children, ...props }: NavListProps) => {\n  return (\n    <List type=\"ul\" {...props} data-list={`unstyled ${isBlock ? 'block' : ''}`}>\n      {children}\n    </List>\n  )\n}\n\n/**\n * Renders a NavItem component.\n * @param {Object} props - The props for the component.\n * @param {string} [props.id] - The id for the component.\n * @param {Object} [props.styles] - The styles for the component.\n * @param {string} [props.classes] - The classes for the component.\n * @param {ReactNode} props.children - The child elements.\n * @param {boolean} [props.inline=true] - Whether the item should display inline.\n * @param {Object} props - Additional props to spread to the ListItem component.\n * @returns {JSX.Element} The rendered NavItem component.\n */\nexport const NavItem = ({\n  id,\n  styles,\n  classes,\n  children,\n  ...props\n}: NavItemProps) => {\n  return (\n    <List.ListItem\n      type=\"li\"\n      id={id}\n      classes={classes}\n      styles={styles}\n      {...props}\n    >\n      {children}\n    </List.ListItem>\n  )\n}\n\n/**\n * Renders a Nav component.\n * @param {Object} props - The props for the component.\n * @param {ReactNode} props.children - The child elements.\n * @param {Object} props - Additional props to spread to the UI component.\n * @returns {JSX.Element} The rendered Nav component.\n */\nexport const Nav = ({ children, ...props }: NavProps) => {\n  return (\n    <UI as=\"nav\" {...props}>\n      {children}\n    </UI>\n  )\n}\n\nexport default Nav\nNav.displayName = 'Nav'\nNav.List = NavList\nNav.Item = NavItem\n","import React from 'react'\nimport usePopover from '#hooks/popover/use-popover'\n\n/**\n * Interface for props accepted by the Popover component\n *\n * @property {ReactNode} children - The content to show in the popover\n * @property {ReactNode} [content] - Optional alternative content for popover\n */\nexport type PopoverProps = {\n  children: React.ReactNode\n  popoverTrigger: React.ReactNode\n  styles?: {}\n}\n\nexport const defaultStyles = {\n  display: 'block',\n  position: 'absolute',\n  background: '#000',\n  border: '1px solid #010101',\n  padding: '10px',\n  color: '#fff',\n  transition: 'opacity .5s ease-in-out',\n} as React.CSSProperties\n\n/**\n * Popover component to display popover content.\n *\n * @param props - The props for the component\n * @param props.children - The content to show in the popover\n * @param props.popoverTrigger - The element that triggers the popover on hover\n *\n * @returns JSX.Element - The rendered JSX element for the Popover\n * @example - <Popover popoverTrigger={<button>Hover here</button>}>Popover content</Popover>\n *\n * The component uses the usePopover hook to handle popover visibility and positioning.\n *\n * It renders the triggerElement, and conditionally renders the popover content\n * positioned absolutely when visible.\n *\n * Inline styles handle visuals like background, border, padding, etc.\n *\n * Transforms and opacity animate the enter/exit transition of the popover.\n */\n\nexport const Popover = ({\n  children,\n  popoverTrigger,\n  styles,\n  ...props\n}: PopoverProps): JSX.Element => {\n  const hoverRef = React.useRef(null)\n  const popOverRef = React.useRef(null)\n  const { isVisible, popoverPosition, handlePointerEvent, handlePointerLeave } =\n    usePopover(hoverRef, popOverRef)\n  const popoverStyles = {\n    opacity: isVisible ? 1 : 0,\n    top: popoverPosition.top,\n    left: popoverPosition.left,\n    // transform: `translateY(${isVisible ? '0px' : '-50px'})`,\n    zIndex: 999,\n  } as React.CSSProperties\n\n  return (\n    <>\n      <div\n        ref={hoverRef}\n        onPointerEnter={handlePointerEvent}\n        onPointerLeave={handlePointerLeave}\n        {...props}\n      >\n        {popoverTrigger}\n      </div>\n      {isVisible && (\n        <div ref={popOverRef} style={{ ...popoverStyles, ...styles }}>\n          {children}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Popover\nPopover.displayName = 'Popover'\nPopover.styles = defaultStyles\n","import FP from '../fp'\nimport { ComponentProps } from '../../types'\nimport React from 'react'\n\n\nexport const Caption = ({ children, ...props }: ComponentProps) => {\n  return (\n    <FP as=\"caption\" {...props}>\n      {children}\n    </FP>\n  )\n}\n\nexport const Thead = ({ children, ...props }: ComponentProps) => (\n  <FP as=\"thead\" {...props}>\n    {children}\n  </FP>\n)\n\nexport const Tbody = ({ children, ...props }: ComponentProps) => (\n  <FP as=\"tbody\" {...props}>\n    {children}\n  </FP>\n)\n\nexport const Tr = ({ children, ...props }: ComponentProps) => (\n  <FP as=\"tr\" {...props}>\n    {children}\n  </FP>\n)\n\nexport const Td = ({ children, ...props }: ComponentProps) => (\n  <FP as=\"td\" {...props}>\n    {children}\n  </FP>\n)\n\nexport const Table = ({ id, dataStyle, children, ...props }: ComponentProps) => {\n  return (\n    <FP\n      as=\"section\"\n      id={id}\n      {...props}\n      data-style=\"table-wrapper\"\n    >\n      <table>{children}</table>\n    </FP>\n  )\n}\n\nTable.displayName = 'Table'\nCaption.displayName = 'Caption'\nThead.displayName = 'Thead'\nTbody.displayName = 'Tbody'\nTr.displayName = 'Tr'\nTd.displayName = 'Td'\n\n","import { Table, Caption, Thead, Tbody, Td, Tr } from './table-elements'\nimport { ComponentProps } from '../../types'\n\nimport React from 'react'\n\nexport interface TableProps extends ComponentProps {\n  tblHead: React.ReactNode\n  tblBody: React.ReactNode\n  tblCaption?: React.ReactNode\n}\n\nexport type dataType = { id: number; items: string[] }[]\n\n/**\n * Render the `thead` by passing an array of names\n */\nexport const RenderHead = (data: []) => {\n  const head = data.map((item, index) => {\n    return <th key={index}>{item}</th>\n  })\n  return <tr>{head}</tr>\n}\n\n/**\n * Render the table body `tr`, `td` with the data provided\n */\nexport const RenderBody = (data: {}[]) => {\n  const rec = data.map((item, index) => {\n    return (\n      <tr key={index}>\n        {/* <td>{item?.id}</td>\n        <td>{item?.items}</td> */}\n      </tr>\n    )\n  })\n  return <Tbody>{rec}</Tbody>\n}\n\n/**\n * Render the table placing `caption`, `thead` and `tbody` in the correct order\n * caption is optional\n */\nexport const RenderTable = ({ tblBody, tblCaption, tblHead }: TableProps) => {\n  return (\n    <Table>\n      {tblCaption && <Caption>{tblCaption}</Caption>}\n      <Thead>\n        <Tr>{tblHead}</Tr>\n      </Thead>\n      <Tbody>{tblBody}</Tbody>\n    </Table>\n  )\n}\n\nRenderTable.displayName = 'TBL'\nRenderBody.displayName = 'renderBody'\nRenderHead.displayName = 'renderHead'\n","import React from 'react'\nimport UI from '#components/ui'\n\nexport type TagProps = {\n  /** HTML element to display the badge as span or p */\n  elm?: 'span' | 'p'\n  /**  Aria role for the component - conditional */\n  role: 'note' | 'status'\n} & React.ComponentProps<typeof UI>\n\nexport const Tag = ({\n  elm = 'span',\n  role = 'note',\n  children,\n  styles,\n  ...props\n}: TagProps) => {\n  return (\n    <UI as={elm} role={role} styles={styles} {...props}>\n      {children}\n    </UI>\n  )\n}\nexport default Tag\nTag.displayName = 'Tag'\n","import UI from '#components/ui'\nimport React from 'react'\n\ntype DetailsProps = {\n  /**\n   * The summary text shown for the details.\n   * Required.\n   */\n  summary: React.ReactNode\n\n  /**\n   * The aria-label  element for accessibility.\n   */\n  ariaLabel: string\n} & React.ComponentProps<'details'> &\n  Partial<React.ComponentProps<typeof UI>>\n\n/**3\n * Details component props interface.\n *\n * @param {React.CSSProperties} [styles] - CSS styles object.\n * @param {string} [classes] - Classnames string.\n * @param {boolean} [open] - Whether the details is open.\n * @param {(e: React.PointerEvent<HTMLDetailsElement>) => void} [onToggle] - onToggle callback.\n * @param {(e: React.PointerEvent<HTMLDetailsElement>) => void} [onPointerDown] - onPointerDown callback.\n * @param {ReactNode} children - The content inside the details.\n * @param {string} [ariaLabel] - aria-label for accessibility.\n * @param {React.Ref<any>} [ref] - Ref object.\n * @param {Object} props - Other props.\n */\nexport const Details = ({\n  summary,\n  icon,\n  styles,\n  classes,\n  ariaLabel,\n  name,\n  open,\n  onPointerDown,\n  onToggle,\n  children,\n  ref,\n  ...props\n}: DetailsProps) => {\n  const defaultStyles: React.CSSProperties = { ...styles }\n\n  const onPointerDownCallback = (e: React.PointerEvent<HTMLDetailsElement>) => {\n    if (onPointerDown) onPointerDown?.(e)\n    if (onPointerDown) onPointerDown?.(e)\n  }\n\n  const onToggleCallback = (e: React.PointerEvent<HTMLDetailsElement>) => {\n    if (onToggle) onPointerDown?.(e)\n  }\n  return (\n    <UI\n      as=\"details\"\n      style={defaultStyles}\n      className={classes}\n      onToggle={onToggleCallback}\n      ref={ref}\n      open={open}\n      aria-label={ariaLabel || 'Details dropdown'}\n      name={name}\n      {...props}\n    >\n      <UI as=\"summary\" role=\"group\" onPointerDown={onPointerDownCallback}>\n        {icon}\n        {summary}\n      </UI>\n      <UI as=\"section\">{children}</UI>\n    </UI>\n  )\n}\n\nexport default Details\nDetails.displayName = 'Details'\n","// import FP from '../fp'\nimport React from 'react'\nimport UI from '#components/ui'\n\ntype InheritedProps = React.ComponentProps<typeof UI>\n\ntype TextElements =\n  | 'a'\n  | 'b'\n  | 'blockquote'\n  | 'b'\n  | 'blockquote'\n  | 'cite'\n  | 'code'\n  | 'em'\n  | 'i'\n  | 'em'\n  | 'i'\n  | 'kbd'\n  | 'mark'\n  | 'p'\n  | 's'\n  | 'small'\n  | 'span'\n  | 'span'\n  | 'strong'\n  | 'mark'\n  | 'p'\n  | 's'\n  | 'small'\n  | 'span'\n  | 'span'\n  | 'strong'\n  | 'sub'\n  | 'sup'\n  | 'time'\n  | 'time'\n  | 'u'\n\nexport type TextProps = {\n  /**\n   * Text element to to use\n   * Text element to to use\n   */\n  elm?: TextElements\n  /** Pass a text element or string */\n  text?: string\n} & InheritedProps\n\nexport const Text = ({\n  elm = 'p',\n  id,\n  text,\n  styles,\n  classes,\n  children,\n  ...props\n}: TextProps) => {\n  return (\n    <UI as={elm} id={id} styles={styles} className={classes} {...props}>\n      <UI as={elm} id={id} styles={styles} className={classes} {...props}>\n        {children || text}\n      </UI>\n    </UI>\n  )\n}\n\ntype TitleProps = {\n  /**\n   * HTML headings\n   */\n  elm?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n} & InheritedProps\n\nexport const Title = ({\n  elm = 'h3',\n  id,\n  children,\n  styles,\n  classes,\n  ...props\n}: TitleProps) => {\n  return (\n    <Text as={elm} id={id} styles={styles} className={classes} {...props}>\n      {children}\n    </Text>\n  )\n}\n\nexport default Text\n\nText.displayName = 'Text'\nTitle.displayName = 'Title'\n","import React from 'react'\nimport UI from '../ui'\n\nexport type TextareaProps = React.ComponentProps<'textarea'> &\n  React.ComponentProps<typeof UI>\n\n/**\n * Textarea component.\n *\n * @param value - The value of the textarea.\n * @param rows - The number of rows.\n * @param cols - The number of columns.\n * @param id - The id of the textarea.\n * @param name - The name of the textarea.\n * @param required - Whether the textarea is required.\n * @param disabled - Whether the textarea is disabled.\n * @param readOnly - Whether the textarea is read only.\n * @param onBlur - Blur event handler.\n * @param onPointerDown - Pointer down event handler.\n * @param onChange - Change event handler.\n * @param ref - Ref for the textarea.\n * @param styles - Styles object for the textarea.\n * @param textareaRef - Ref specifically for the textarea element.\n * @param props - Other props.\n */\nexport const Textarea = ({\n  id,\n  classes,\n  value,\n  rows = 5,\n  cols = 25,\n  name,\n  required,\n  disabled,\n  readOnly,\n  onBlur,\n  onPointerDown,\n  onChange,\n  ref,\n  styles,\n  placeholder,\n  ...props\n}: TextareaProps) => {\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    if (onChange && !disabled) {\n      onChange?.(e)\n    }\n  }\n\n  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    if (onBlur && !disabled) {\n      onBlur?.(e)\n    }\n  }\n\n  const handlePointerDown = (e: React.PointerEvent<HTMLTextAreaElement>) => {\n    if (onPointerDown && !disabled) {\n      onPointerDown?.(e)\n    }\n  }\n\n  return (\n    <UI\n      as=\"textarea\"\n      id={id}\n      name={name}\n      rows={rows}\n      cols={cols}\n      styles={styles}\n      className={classes}\n      data-style=\"textarea\"\n      required={required}\n      value={value}\n      aria-disabled={disabled}\n      readOnly={readOnly}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      onPointerDown={handlePointerDown}\n      ref={ref}\n      placeholder={placeholder || `${required ? '*' : ''} Message`}\n      {...props}\n    />\n  )\n}\n\nexport default Textarea\nTextarea.displayName = 'Textarea'\n","import React from 'react'\nimport UI from '#components/ui'\nimport { type } from 'os'\n\nexport type TitleProps = {\n  children: React.ReactNode\n  type: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n  ui?: string\n} & React.ComponentProps<typeof UI>\n\nconst Heading = ({\n  type = 'h3',\n  id,\n  styles,\n  ui = 'display',\n  children,\n  ...props\n}: TitleProps) => {\n  return (\n    <UI as={type} id={id} styles={styles} data-ui={ui} {...props}>\n      {children}\n    </UI>\n  )\n}\n\nexport default Heading\nHeading.displayName = 'Heading'\n","// Code: Breadcrumb component\nimport React from 'react'\nimport UI from '#components/ui'\nimport { Truncate } from '#libs/content'\n\n// TYPES\n\ntype customRoute = {\n  /** The path or id for routing */\n  path?: string\n  /** The display name */\n  name: string\n  /** The url if linking out */\n  url?: string\n}\n\ntype BreadcrumbProps = {\n  /** Array of custom route objects */\n  routes?: customRoute[]\n  /** Starting route node */\n  startRoute?: React.ReactNode\n  /** Spacer node between routes */\n  spacer?: React.ReactNode\n  /** String representing current route */\n  currentRoute?: string\n  /** Prefix breadcrumb aria-label - \"prefix breadcrumb\" */\n  ariaLabelPrefix?: string\n  /** Truncate breadcrumb text after this length */\n  truncateLength?: number\n} & React.ComponentProps<typeof UI>\n\n// Components\n\n/**\n * Items component.\n *\n * @param styles - Styles object for the item.\n * @param id - Id for the item.\n * @param classes - Class names for the item.\n * @param children - Child components.\n * @param props - Other props.\n */\nconst Items = ({\n  styles,\n  id,\n  classes,\n  children,\n  ...props\n}: React.ComponentProps<typeof UI>) => {\n  return (\n    <li data-list=\"unstyled inline\" {...props}>\n      {children}\n    </li>\n  )\n}\n\n/**\n * List component.\n *\n * @param children - The content to render inside the list.\n * @param props - Additional props to pass to the UI component.\n */\nconst List = ({ children, ...props }: React.ComponentProps<typeof UI>) => {\n  return (\n    <UI as=\"ol\" data-list=\"unstyled inline\" {...props}>\n      {children}\n    </UI>\n  )\n}\n\n/**\n * Nav component.\n *\n * @param styles - Styles object for the nav.\n * @param id - Id for the nav.\n * @param classes - Class names for the nav.\n * @param children - Child components.\n * @param props - Other props.\n */\nconst Nav = ({\n  styles,\n  id,\n  classes,\n  children,\n  ...props\n}: React.ComponentProps<typeof UI>) => {\n  return (\n    <UI as=\"nav\" id={id} styles={styles} className={classes} {...props}>\n      <List>{children}</List>\n    </UI>\n  )\n}\n\n/**\n * Navigation component for breadcrumbs.\n *\n * @param props - Props for the navigation component.\n * @param props.startRoute - Starting route node. Default 'Home'.\n * @param props.currentRoute - String representing current route.\n * @param props.spacer - Spacer node between routes. Default '&#47;'.\n * @param props.routes - Array of custom route objects.\n * @param props.styles - Styles object for the nav.\n * @param props.id - Id for the nav.\n * @param props.classes - Class names for the nav.\n * @param props.children - Child components.\n */\nexport const Breadcrumb = ({\n  startRoute = 'Home',\n  currentRoute,\n  spacer = <>&#47;</>,\n  routes,\n  styles,\n  id,\n  classes,\n  ariaLabelPrefix,\n  truncateLength = 15,\n  ...props\n}: BreadcrumbProps): React.JSX.Element => {\n  const [currentPath, setCurrentPath] = React.useState('')\n  React.useEffect(() => {\n    const path = currentRoute || window.location.pathname\n    if (path.length) {\n      setCurrentPath(path)\n    }\n  }, [])\n\n  /**\n   * Gets the path name for the given path segment.\n   *\n   * @param pathSegment - The path segment (string or number) to get the path name for.\n   * @returns The path name object for the given path segment.\n   */\n  const getPathName = (pathSegment: string): customRoute => {\n    const route = routes?.find((route) => route.path === pathSegment)\n\n    return {\n      path: route?.path || pathSegment,\n      name: route?.name || pathSegment,\n      url: route?.url || pathSegment,\n    }\n  }\n\n  /** Array of path segments from current path */\n  const segments = currentPath.split('/').filter((segment) => segment)\n  /** Index of last item in segments array */\n  const lastSegment = segments.length - 1\n\n  /** Unique id for breadcrumb */\n  const uuid = React.useId()\n\n  return currentPath.length ? (\n    <Nav\n      id={id}\n      {...props}\n      styles={styles}\n      className={classes}\n      aria-label={ariaLabelPrefix}\n    >\n      <Items key={`${startRoute}-${uuid}`}>\n        <a href=\"/\">{startRoute}</a>\n      </Items>\n      {segments.length ? (\n        segments.map((segment: any, index: number) => {\n          const currentSegment = getPathName(segment)\n          const { name, url, path } = currentSegment\n          if (index === lastSegment) {\n            return (\n              <>\n                {typeof segments[lastSegment] === 'string' &&\n                  segments[lastSegment].length > 3 &&\n                  segments[lastSegment] !== segments[lastSegment - 1] && (\n                    <Items key={`${path || index}-${uuid}`}>\n                      <>\n                        <span aria-hidden=\"true\">{spacer}</span>\n                        <a\n                          aria-current=\"page\"\n                          aria-label={\n                            name.length > truncateLength ? name : undefined\n                          }\n                        >\n                          {Truncate(decodeURIComponent(name), truncateLength)}\n                        </a>\n                      </>{' '}\n                    </Items>\n                  )}\n              </>\n            )\n          } else {\n            return (\n              <Items key={`${currentSegment?.name}-${uuid}`}>\n                <span aria-hidden=\"true\">{spacer}</span>\n                <span>\n                  <a\n                    href={url}\n                    aria-label={name.length > truncateLength ? name : undefined}\n                  >\n                    {Truncate(decodeURIComponent(name), truncateLength)}\n                  </a>\n                </span>\n              </Items>\n            )\n          }\n        })\n      ) : (\n        <></>\n      )}\n    </Nav>\n  ) : (\n    <></>\n  )\n}\n\nexport default Breadcrumb\n\nBreadcrumb.displayName = 'BreadCrumb'\nBreadcrumb.Nav = Nav\nBreadcrumb.List = List\nBreadcrumb.Items = Items\n","/**\n * Converts a string to a slug by:\n * - Converting to lowercase\n * - Trimming whitespace\n * - Removing non-word and non-hyphen characters\n * - Replacing sequences of whitespace and hyphens with a single hyphen\n * - Removing leading and trailing hyphens\n *\n * @param str - The string to slugify\n * @returns The slugified string\n */\nexport const Slugify = (str: string) => {\n  return str\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '')\n    .replace(/[\\s_-]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n}\n\n/**\n * Truncates a string to a maximum length.\n *\n * @param str - The string to truncate.\n * @param length - The maximum length of the truncated string. Defaults to 15.\n * @returns The truncated string, with ellipses appended if truncated.\n */\nexport const Truncate = (str: string, length: number = 15) => {\n  return str.length > length ? `${str.slice(0, length)}...` : str\n}\n","import React, { useState, ChangeEvent, useEffect } from 'react'\nimport { useTextToSpeech } from './useTextToSpeech'\nimport Textarea from '#components/form/textarea.jsx'\nimport TextToSpeechControls from './views/TextToSpeechControls'\n\n/**\n * Props for the TextToSpeechComponent.\n * @interface TextToSpeechComponentProps\n */\ninterface TextToSpeechComponentProps {\n  /** Initial text to be spoken. Defaults to an empty string. */\n  initialText?: string\n  /** Whether to show the text input field. Defaults to true. */\n  showTextInput?: boolean\n  /** The voice to be used for speech synthesis. */\n  voice?: SpeechSynthesisVoice | undefined\n  /** The pitch of the voice. Defaults to 1. */\n  pitch?: number\n  /** The rate of speech. Defaults to 1. */\n  rate?: number\n  /** The language to be used for speech synthesis. */\n  language?: string\n  /** Player label */\n  label?: string | React.ReactNode\n  /** Callback function to be called when speech ends. */\n  onEnd?: () => void\n}\n\n/**\n * A component that converts text to speech using the Web Speech API.\n * @param {TextToSpeechComponentProps} props - The props for the component.\n * @returns {JSX.Element} The rendered TextToSpeechComponent.\n */\nexport const TextToSpeech: React.FC<TextToSpeechComponentProps> = ({\n  initialText = '',\n  showTextInput = false,\n  voice,\n  pitch = 1,\n  rate = 1,\n  language,\n  label,\n  onEnd,\n}) => {\n  const {\n    speak,\n    pause,\n    resume,\n    cancel,\n    isSpeaking,\n    isPaused,\n    getAvailableLanguages,\n    availableVoices,\n  } = useTextToSpeech()\n  const [text, setText] = useState<string>(initialText)\n  console.log(getAvailableLanguages())\n\n  useEffect(() => {\n    setText(initialText)\n  }, [initialText])\n\n  const handleSpeak = (): void => {\n    if (text.trim() !== '') {\n      speak(text, { voice, pitch, rate }, handleEnd)\n    }\n  }\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    setText(e.target.value)\n  }\n\n  const handleEnd = (): void => {\n    if (onEnd) {\n      onEnd()\n    }\n  }\n\n  return (\n    <>\n      {showTextInput && <Textarea value={text} onChange={handleChange} />}\n      <TextToSpeechControls\n        label={label}\n        isSpeaking={isSpeaking}\n        isPaused={isPaused}\n        onSpeak={handleSpeak}\n        onPause={pause}\n        onResume={resume}\n        onCancel={cancel}\n      />\n    </>\n  )\n}\n\nexport default TextToSpeech\nTextToSpeech.displayName = 'TextToSpeechComponent'\n","import { useState, useEffect } from 'react'\n\n/**\n * Options for configuring speech synthesis.\n * @interface SpeechOptions\n */\ninterface SpeechOptions {\n  /** The language for speech synthesis (e.g., 'en-US') */\n  lang?: string\n\n  /** The pitch of the voice (0 to 2) */\n  pitch?: number\n  /** The speed of the voice (0.1 to 10) */\n  rate?: number\n\n  /** The voice to use for speech synthesis */\n  voice?: SpeechSynthesisVoice\n}\n/**\n * Custom hook to handle text-to-speech functionality.\n *\n * @param {SpeechSynthesisVoice} [initialVoice] - The initial voice to use for speech synthesis.\n * @returns {Object} An object containing methods to control speech synthesis and state variables.\n */\nexport const useTextToSpeech = (initialVoice?: SpeechSynthesisVoice) => {\n  const [availableVoices, setAvailableVoices] = useState<\n    SpeechSynthesisVoice[]\n  >([])\n  const [currentVoice, setCurrentVoice] = useState<\n    SpeechSynthesisVoice | undefined\n  >(initialVoice)\n\n  const [isSpeaking, setIsSpeaking] = useState<boolean>(false)\n  const [isPaused, setIsPaused] = useState<boolean>(false)\n  const [utterance, setUtterance] = useState<SpeechSynthesisUtterance | null>(\n    null,\n  )\n\n  useEffect(() => {\n    const updateVoices = () => {\n      const voices = window.speechSynthesis.getVoices()\n      setAvailableVoices(voices)\n\n      // Set default voice to Google US English if available\n      const googleVoice = voices.find(\n        (voice) => voice.name === 'Google US English',\n      )\n      if (googleVoice) {\n        setCurrentVoice(googleVoice)\n      } else {\n        // Fallback to the first English voice if Google voice is not available\n        const englishVoice = voices.find((voice) =>\n          voice.lang.startsWith('en-'),\n        )\n        if (englishVoice) {\n          setCurrentVoice(englishVoice)\n        }\n      }\n    }\n\n    updateVoices()\n    window.speechSynthesis.onvoiceschanged = updateVoices\n\n    return () => {\n      window.speechSynthesis.onvoiceschanged = null\n    }\n  }, [])\n\n  /**\n   * Gets the list of available languages for speech synthesis.\n   * @returns {string[]} An array of available language codes.\n   */\n  const getAvailableLanguages = () => {\n    return [...new Set(availableVoices.map((voice) => voice.lang))]\n  }\n\n  /**\n   * Initiates speech synthesis for the given text.\n   *\n   * @param {string} text - The text to be spoken.\n   * @param {SpeechOptions} [options={}] - Options for speech synthesis.\n   * @param {Function} [onEnd] - Callback function to be called when speech ends.\n   */\n  const speak = (\n    text: string,\n    options: SpeechOptions = {},\n    onEnd?: () => void,\n  ) => {\n    const utterance = new SpeechSynthesisUtterance(text)\n\n    utterance.lang = options.lang ?? 'en-US'\n    utterance.pitch = options.pitch ?? 1\n    utterance.rate = options.rate ?? 1\n    utterance.voice = currentVoice ?? options.voice ?? null\n\n    utterance.onend = () => {\n      setIsSpeaking(false)\n      setIsPaused(false)\n      if (onEnd) {\n        onEnd()\n      }\n    }\n\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.speak(utterance)\n      setUtterance(utterance)\n      setIsSpeaking(true)\n      setIsPaused(false)\n    } else {\n      console.error('Speech synthesis not supported')\n      // Handle the error appropriately\n    }\n  }\n\n  /**\n   * Changes the current voice used for speech synthesis.\n   * @param {SpeechSynthesisVoice} voice - The new voice to use.\n   */\n  const changeVoice = (voice: SpeechSynthesisVoice) => {\n    setCurrentVoice(voice)\n  }\n\n  /**\n   * Pauses the ongoing speech synthesis.\n   */\n  const pause = () => {\n    if (isSpeaking && !isPaused) {\n      window.speechSynthesis.pause()\n      setIsPaused(true)\n    }\n  }\n\n  /**\n   * Resumes the paused speech synthesis.\n   */\n  const resume = () => {\n    if (isSpeaking && isPaused) {\n      window.speechSynthesis.resume()\n      setIsPaused(false)\n    }\n  }\n\n  /**\n   * Cancels the ongoing speech synthesis.\n   */\n  const cancel = () => {\n    if (isSpeaking) {\n      window.speechSynthesis.cancel()\n      setIsSpeaking(false)\n      setIsPaused(false)\n    }\n  }\n\n  return {\n    /** Initiates speech synthesis for the given text */\n    speak,\n    /** Pauses the ongoing speech synthesis */\n    pause,\n    /** Resumes the paused speech synthesis */\n    resume,\n    /** Cancels the ongoing speech synthesis */\n    cancel,\n    /** Indicates whether speech synthesis is currently active */\n    isSpeaking,\n    /** Indicates whether speech synthesis is currently paused */\n    isPaused,\n    /** Array of available voices for speech synthesis */\n    availableVoices,\n    /** Changes the current voice used for speech synthesis */\n    changeVoice,\n    /** The currently selected voice for speech synthesis */\n    currentVoice,\n    /** Gets the list of available languages for speech synthesis */\n    getAvailableLanguages,\n  }\n}\n","import React from 'react'\nimport Icon from '#components/icons/icon'\nimport UI from '#components/ui'\nimport { FC } from 'react'\n\n/**\n * Props for the TextToSpeechControls component.\n * @interface TextToSpeechControlsProps\n */\ninterface TextToSpeechControlsProps {\n  /** Optional label for the controls */\n  label?: string | React.ReactNode\n  /** Indicates if the text-to-speech is currently speaking */\n  isSpeaking: boolean\n  /** Indicates if the text-to-speech is paused */\n  isPaused: boolean\n  /** Function to start speaking */\n  onSpeak: () => void\n  /** Function to pause speaking */\n  onPause: () => void\n  /** Function to resume speaking */\n  onResume: () => void\n  /** Function to cancel speaking */\n  onCancel: () => void\n}\n\n/**\n * TTSButtonComponent props\n * @interface TTSButtonComponentProps\n */\ninterface TTSButtonComponentProps {\n  /** The content of the button */\n  children: React.ReactNode\n  /** Function to call when the button is clicked */\n  onClick: () => void\n}\n\n/**\n * TTSButtonComponent is a reusable button component for text-to-speech controls.\n * @param {TTSButtonComponentProps} props - The component props\n * @returns {React.ReactElement} The rendered button\n */\nexport const TTSButtonComponent: React.FC<TTSButtonComponentProps> = ({\n  children,\n  onClick,\n}) => {\n  return (\n    <UI\n      as=\"button\"\n      type=\"button\"\n      className=\"tts-border\"\n      data-btn=\"sm text pill\"\n      onClick={onClick}\n    >\n      {children}\n    </UI>\n  )\n}\n\nexport const TTSButton = React.memo(TTSButtonComponent)\n\n/**\n * TextToSpeechControlsComponent interface extends FC<TextToSpeechControlsProps>\n * and includes a TTSButton property.\n * @interface TextToSpeechControlsComponent\n * @extends {FC<TextToSpeechControlsProps>}\n */\ninterface TextToSpeechControlsComponent extends FC<TextToSpeechControlsProps> {\n  /** The TTSButton component used within TextToSpeechControls */\n  TTSButton: typeof TTSButton\n}\n\n/**\n * TextToSpeechControls component provides a user interface for controlling text-to-speech functionality.\n * @param {TextToSpeechControlsProps} props - The component props\n * @returns {React.ReactElement} The rendered TextToSpeechControls component\n */\nconst TextToSpeechControls: TextToSpeechControlsComponent = ({\n  label,\n  isSpeaking,\n  isPaused,\n  onSpeak,\n  onPause,\n  onResume,\n  onCancel,\n}) => {\n  const iconSize = 16\n\n  return (\n    <UI as=\"div\" data-tts>\n      {label && <p>{label}</p>}\n      {!isSpeaking && (\n        <TTSButton aria-label=\"Speak\" onClick={onSpeak}>\n          <Icon.PlaySolid size={iconSize} />\n        </TTSButton>\n      )}\n      {isSpeaking && !isPaused && (\n        <TTSButton aria-label=\"Pause\" onClick={onPause}>\n          <Icon.PauseSolid size={iconSize} />\n        </TTSButton>\n      )}\n      {isPaused && (\n        <TTSButton aria-label=\"Resume\" onClick={onResume}>\n          <Icon.ResumeSolid size={iconSize} />\n        </TTSButton>\n      )}\n      <TTSButton aria-label=\"Stop\" onClick={onCancel}>\n        <Icon.StopSolid size={iconSize} />\n      </TTSButton>\n    </UI>\n  )\n}\n\nTextToSpeechControls.displayName = 'TextToSpeechControls'\nTextToSpeechControls.TTSButton = TTSButton\n\nexport default TextToSpeechControls\n"]}